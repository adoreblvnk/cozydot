{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"main_io": {
		"prefix": ["io", "main_io"]
		"body": [
			"#include <algorithm>",
			"#include <iostream>",
			"#include <map>",
			"#include <string>",
			"#include <vector>",
			"",
			"using std::cout, std::endl, std::string, std::vector, std::map;",
			"",
			"int main() {",
			"    $1",
			"    return 0;",
			"}"
		],
		"description": "Snippet for IO code boilerplate."
	},
	"main_cp": {
		"prefix": ["main", "main_cp"],
		"body": [
			"#include <algorithm>",
			"#include <iostream>",
			"#include <map>",
			"#include <string>",
			"#include <vector>",
			"",
			"using std::cout, std::endl;",
			"using std::max, std::min, std::max_element, std::min_element, std::sort, std::reverse;",
			"using std::string, std::vector, std::map;",
			"",
			"// overloads operator << to print formatted vectors.",
			"template <typename T>",
			"std::ostream& operator<<(std::ostream& os, const vector<T> vec) {",
			"    os << \"[\";",
			"    if (vec.empty()) {",
			"        return os << \"]\";",
			"    }",
			"    for (int i{0}; i < vec.size(); i++) {",
			"        os << vec.at(i);",
			"        if (i != vec.size() - 1) {",
			"            os << \", \";",
			"        }",
			"    }",
			"    return os << \"]\";",
			"}",
			"",
			"// overloads operator << to print formatted maps.",
			"template <typename T, typename T1>",
			"std::ostream& operator<<(std::ostream& os, const map<T, T1> dict) {",
			"    os << \"{\";",
			"    if (dict.empty()) {",
			"        return os << \"}\";",
			"    }",
			"    int i{0};",
			"    for (auto& [key, value] : dict) {",
			"        os << key << \": \" << value;",
			"        if (i < dict.size() - 1) {",
			"            os << \", \";",
			"        }",
			"        i++;",
			"    }",
			"    return os << \"}\";",
			"}",
			"",
			"int main() {",
			"    $1",
			"    return 0;",
			"}",
			""
		],
		"description": "Snippet for easy printing of vectors & maps in competitive programming."
	},
}